name: QRB ROS distribution build

on:
  push:
  pull_request:
  workflow_dispatch:
  schedule:
  # Every weekday 8:00 UTC+8
  - cron: '0 0 * * 1-5'

env:
  PERSIST_DIR: /efs/gh-runners/qualcomm-qrb-ros
  DL_DIR: /efs/gh-runners/qualcomm-qrb-ros/downloads
  WORKSPACE: ${{ github.workspace }}/ros_ws
  SDK_DIR: ${{ github.workspace }}/sdk
  QCOM_SELECTED_BSP: custom
  DEPENDENCIES: "qualcomm-qrb-ros/ros2_benchmark qualcomm-qrb-ros/libqrc"

jobs:
  build:
    runs-on: [self-hosted, qcom-u2404, amd64, amd64-8x]
    timeout-minutes: 720
    strategy:
      fail-fast: false
      matrix:
        machine:
          - qcs6490-rb3gen2-vision-kit
          - qcs9075-iq-9075-evk
          - qcs8300-ride-sx
        distro:
          - qcom-robotics-ros2-jazzy
    steps:
      - name: Set enviroment
        run: |
          echo "MACHINE=${{ matrix.machine }}" >> $GITHUB_ENV
          echo "DISTRO=${{ matrix.distro }}" >> $GITHUB_ENV
          mkdir -p ${WORKSPACE}
          mkdir -p ${SDK_DIR}
          sudo apt update
          sudo apt install -y curl gnupg2 lsb-release
          sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
          sudo apt update
          sudo apt-get install -y python3-vcstool

      - name: Set up SDK
        run: |
          export TARGET_DIR="${PERSIST_DIR}/${MACHINE}-${DISTRO}-${QCOM_SELECTED_BSP}"
          if [ -e ${PERSIST_DIR} ] && [ -r ${PERSIST_DIR} ] && [ -x ${PERSIST_DIR} ];then
            image_dir=$(find ${TARGET_DIR} -type d -name 'qcom-[0-9]*.[0-9]*.[0-9]*-QLI.[0-9]*.[0-9]*-Ver.[0-9]*.[0-9]*_robotics-product-sdk-[0-9]*.[0-9]' | sort -V | tail -n 1)
            sdk_file=$(find ${image_dir} -type f -name "*.sh")
            echo "SDK path: ${image_dir}"
            echo "SDK file: ${sdk_file}"

            echo "Setting up SDK..."
            umask 022
            ${sdk_file} <<EOF
            ${SDK_DIR}
            Y
          EOF
          else
            echo "Shared directory is unavailable!!!"
            exit 1
          fi
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: ${{ github.workspace }}/${{ github.event.repository.name }}
          ref: ${{ github.event_name == 'schedule' && 'develop' || github.event_name == 'workflow_dispatch'  && 'develop' || null }}

      - name: Download source depdencies
        run: |
          IFS=' ' read -ra repos <<< "$DEPENDENCIES"
          for repo in "${repos[@]}"; do
            git clone https://github.com/${repo}.git ${WORKSPACE}/${repo#*/} || true
          done

      - name: Sync and build
        run: |
          ls ${{ github.workspace }}
          export PATH=/home/ubuntu/.local/bin:$PATH
          vcs import --input ${{ github.workspace }}/${{ github.event.repository.name }}/jazzy/repo.yaml ${WORKSPACE}

          cd ${SDK_DIR}
          umask 022
          . environment-setup-armv8-2a-qcom-linux
          cd ${WORKSPACE}
          export AMENT_PREFIX_PATH="${OECORE_NATIVE_SYSROOT}/usr:${OECORE_TARGET_SYSROOT}/usr"
          export PYTHONPATH=${PYTHONPATH}:${OECORE_NATIVE_SYSROOT}/usr/lib/python3.12/site-packages/:${OECORE_TARGET_SYSROOT}/usr/lib/python3.12/site-packages/

          # Get project list
          cd ${{ github.workspace }}/${{ github.event.repository.name }}/jazzy/
          project_names=($(yq '.repositories | keys' repo.yaml | tr -d '[],'))

          # Get ignore list
          ignore_list=("qrb_ros_docker" "qrb_ros_transport_test")

          for project in "${project_names[@]}"; do
            project=$(echo $project | tr -d '"')
            cd ${WORKSPACE}/$project/.github/
            if [ -f ./config.yaml ]; then
              packages=$(yq '.packages[].name' ./config.yaml | tr -d '"')
              for package in $packages; do
                machine_supported=$(yq ".packages[] | select(.name == \"${package}\") | .machines[] | select(.name == \"${MACHINE}\")" ./config.yaml)
                echo "project: ${project}, package: ${package}, machine_supported: ${machine_supported}."
                if [ -z "${machine_supported}" ];then
                  ignore_list+=("${package}")
                  echo "Adding ${package} to ignore_list."
                fi
              done
            else
              echo "config.yaml does not exist in $project!"
            fi
          done

          echo "Ignore list:" "${ignore_list[@]}"

          cd ${WORKSPACE}
          colcon build --packages-ignore "${ignore_list[@]}" --merge-install --cmake-args \
            -DPython3_ROOT_DIR=${OECORE_TARGET_SYSROOT}/usr \
            -DPython3_NumPy_INCLUDE_DIR=${OECORE_TARGET_SYSROOT}/usr/lib/python3.12/site-packages/numpy/core/include \
            -DPYTHON_SOABI=cpython-312-aarch64-linux-gnu -DCMAKE_STAGING_PREFIX="$(pwd)/install" \
            -DCMAKE_PREFIX_PATH="$(pwd)/install/share" \
            -DBUILD_TESTING=OFF

      - name: Stage build artifacts for publishing
        continue-on-error: true
        run: |
          build_dir=./uploads
          mkdir -p $build_dir

          tar -cvf ${build_dir}/${{ github.event.repository.name }}-${MACHINE}-${DISTRO}-${QCOM_SELECTED_BSP}-artifacts.tar --transform "s|^${WORKSPACE}/||" -C ${WORKSPACE} install build log

      - name: Upload private artifacts
        continue-on-error: true
        uses: qualcomm-linux/upload-private-artifact-action@v1
        with:
          path: ./uploads
          fileserver_url: "https://quic-qrt-ros-fileserver-1029608027416.us-central1.run.app"
